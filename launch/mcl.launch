<?xml version="1.0"?>

<launch>

    <!-- arguments
       which_impl:    choose the implementation of the MCL algorithm
                      - cpu: sequential implementation on CPU
                      - gpu: CUDA implementation on GPU
                      - hybrid: particle partition among CPU and GPU
                      - adaptive: heterogeneous implementation on CPU + GPU
       which_rm:      choose the implementation of the ray marching algorithm
                      - rm: CPU implementation ==> RayMarching
                      - rmgpu: GPU implementation ==> RayMarchingGPU
       which_viz:     choose which particles for visualization
                      - first: select the first n particles in the population
                      - largest: select the n particles with largest weights
       which_expect:  choose how to compute the expected pose from the population
                      - largest: pick the particle with the largest weight
                      - ave: compute the weighted average of all particles
       squash_factor: used when computing weights of each particle. The weight w
                      is transformed to pow(w, 1.0/squash_factor) so that we will
                      not dealing with too small weight values.
       viz:           control whether or not to publish inferred_pose and particles
                      to /pf/viz/inferred_pose and /pf/viz/particles. This is also
                      used to control whether to launch rviz for visualization.
       bag:           control whether rosbag is launched to play messages
  -->
  <arg name="scan_topic" default="/scan"/>
  <!-- <arg name="odometry_topic" default="/vesc/odom"/> -->
  <arg name="odometry_topic" default="/odom"/>
  <arg name="angle_step" default="18"/>
  <arg name="max_particles" default="100"/>
  <arg name="N_gpu" default="256"/>
  <arg name="squash_factor" default="2.2"/>
  <arg name="viz" default="1"/>
  <arg name="bag" default="1"/>
  <arg name="which_impl" default="cpu"/>
  <arg name="which_rm" default="rm"/>
  <arg name="which_viz" default="largest"/>
  <arg name="which_expect" default="largest"/>
  <arg name="init_var" default="5"/>

  <!-- For the mcl_gpu package to work, a map needs to be loaded first -->
  <include file="$(find mcl_gpu)/launch/map_server.launch"/>

  <!-- Launch the racecar model -->
  <include file="$(find f1tenth_simulator)/launch/racecar_model.launch"/>

  <!--
      Launch the rosbag node to play the recorded messages.
      A 5 seconds delay is added since the player node needs to wait for
      the particle filter node to be ready first.
      The idea is copied from
      https://answers.ros.org/question/233353/set-delay-between-starting-nodes-within-launch-file/

      required="true" means that when the player finishes, all other nodes will
      also be killed.
      The solution is copied from
      https://answers.ros.org/question/50184/how-to-notify-that-a-bag-file-has-been-completely-played/\

      Other arguments:
        rate: multiply the publish rate by rate
        duration: play only duration seconds from the bag files
  -->
  <arg name="bagfile" default="circle_basement"/>
  <arg name="delay" default="5.0"/>
  <arg name="rate" default="1"/>
  <arg name="duration" default="5"/>
  <node pkg="rosbag" type="play" name="player"
        args="--clock -r $(arg rate) -u $(arg duration) $(find mcl_gpu)/bags/$(arg bagfile).bag"
        required = "true"
        launch-prefix="bash -c 'sleep $(arg delay); $0 $@' "
        if="$(eval arg('bag') == 1)"/>

  <!-- Launch the rviz node only when viz == 1 -->
  <node type="rviz" name="rviz" pkg="rviz" args="-d $(find mcl_gpu)/rviz/simulator.rviz"
        if="$(eval arg('viz') == 1)"/>

  <node pkg="mcl_gpu" type="mcl_gpu" name="mcl_gpu" output="screen">
    <param name="which_rm" value="$(arg which_rm)"/>
    <param name="which_impl" value="$(arg which_impl)"/>
    <param name="scan_topic" value="$(arg scan_topic)"/>
    <param name="odometry_topic" value="$(arg odometry_topic)"/>
    <!-- range data is downsampled by this factor -->
    <param name="angle_step" value="$(arg angle_step)"/>
    <param name="max_particles" value="$(arg max_particles)"/>
    <param name="N_gpu" value="$(arg N_gpu)"/>
    <param name="max_viz_particles" value="200"/>
    <param name="squash_factor" value="$(arg squash_factor)"/>
    <param name="theta_discretization" value="112"/>
    <!-- max sensor range in meters -->
    <param name="max_range" value="10"/>
    <param name="viz" value="$(arg viz)"/>
    <param name="fine_timing" value="0"/>
    <param name="publish_odom" value="0"/>

    <!-- sensor model constants, see sensor model section in the Lab5 guide document -->
    <param name="z_short" value="0.01"/>
    <param name="z_max" value="0.07"/>
    <param name="z_rand" value="0.12"/>
    <param name="z_hit" value="0.75"/>
    <param name="sigma_hit" value="8.0"/>

    <!-- motion model dispersion constant, this could be improved. Large values will spread out
	 the particle distribution more. Too much and it is overly computational to represent the
	 true prob. dist, too little and the particle filter can diverge at high speeds where the
	 ackermann motion model is inaccurate
    -->
    <param name="motion_dispersion_x" value="0.05"/>
    <param name="motion_dispersion_y" value="0.025"/>
    <param name="motion_dispersion_theta" value="0.025"/>
    <!--
        variance used when initializing particles around a pose.
        A smaller variance makes it easier for particles to converge, i.e. to follow the robot
        More particles are needed if a large variance is used.
    -->
    <param name="init_var" value="$(arg init_var)"/>

  </node>
</launch>
